diff --git a/.env.dist b/.env.dist
new file mode 100644
index 0000000..359f01e
--- /dev/null
+++ b/.env.dist
@@ -0,0 +1,6 @@
+REACT_APP_API_URL=http://localhost:3001
+REACT_APP_QUERY_STALE_TIME=5000
+REACT_APP_QUERY_RETRY=1
+REACT_APP_QUERY_DEVTOOLS=false
+REACT_APP_REACT_SCAN_ENABLED=false
+FRONTEND_URL=http://localhost:3000
\ No newline at end of file
diff --git a/.github/workflows/deploy-netlify.yml b/.github/workflows/deploy-netlify.yml
new file mode 100644
index 0000000..d1fd465
--- /dev/null
+++ b/.github/workflows/deploy-netlify.yml
@@ -0,0 +1,53 @@
+name: Deploy to Netlify
+
+on:
+  push:
+    branches: [main]
+  pull_request:
+    types: [opened, synchronize, reopened]
+  workflow_dispatch:
+
+jobs:
+  deploy:
+    runs-on: ubuntu-latest
+    steps:
+      - name: Checkout repository
+        uses: actions/checkout@v4
+
+      - name: Setup Node.js
+        uses: actions/setup-node@v4
+        with:
+          node-version: "18"
+          cache: "yarn"
+
+      - name: Install dependencies
+        run: yarn install --frozen-lockfile
+
+      - name: Create necessary directories and files
+        run: |
+          mkdir -p netlify/functions
+          cp -r netlify/* netlify/ || true
+          node netlify/prebuild.js
+
+      - name: Build app
+        run: yarn build
+        env:
+          CI: false
+
+      - name: Deploy to Netlify
+        uses: nwtgck/actions-netlify@v2.0
+        with:
+          publish-dir: "./build"
+          deploy-message: "Deploy from GitHub Actions"
+          production-branch: main
+          github-token: ${{ secrets.GITHUB_TOKEN }}
+          netlify-config-path: ./netlify.toml
+          functions-dir: ./netlify/functions
+          enable-pull-request-comment: true
+          enable-commit-comment: true
+          # Generate unique alias for preview deployments
+          alias: ${{ github.event.number != null && format('pr-{0}', github.event.number) || github.ref_name == 'main' && 'production' || format('branch-{0}', github.ref_name) }}
+        env:
+          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
+          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
+        timeout-minutes: 5
diff --git a/netflify/functions/api.js b/netflify/functions/api.js
new file mode 100644
index 0000000..0f295b9
--- /dev/null
+++ b/netflify/functions/api.js
@@ -0,0 +1,123 @@
+import jsonServer from "json-server";
+import serverless from "serverless-http";
+import { join } from "path";
+import { fileURLToPath } from "url";
+import fs from "fs";
+
+const __dirname = join(fileURLToPath(new URL(".", import.meta.url)), "../..");
+
+// Path to db.json in the Netlify deployment
+const DB_PATH = join("/tmp", "db.json");
+
+// Initialize database if it doesn't exist
+if (!fs.existsSync(DB_PATH)) {
+  // Copy from sample or create a new one
+  const samplePath = join(__dirname, "db.json.sample");
+  if (fs.existsSync(samplePath)) {
+    fs.copyFileSync(samplePath, DB_PATH);
+  } else {
+    fs.writeFileSync(DB_PATH, JSON.stringify({ todos: [] }, null, 2));
+  }
+}
+
+const readDb = () => {
+  try {
+    return JSON.parse(fs.readFileSync(DB_PATH));
+  } catch (error) {
+    console.error("Error reading database:", error);
+    return { todos: [] };
+  }
+};
+
+const writeDb = (data) => {
+  try {
+    fs.writeFileSync(DB_PATH, JSON.stringify(data, null, 2));
+  } catch (error) {
+    console.error("Error writing to database:", error);
+  }
+};
+
+const normalizeValue = (value) => {
+  return value.trim().toLowerCase();
+};
+
+// Set up the server
+const app = jsonServer.create();
+const router = jsonServer.router(DB_PATH);
+const middlewares = jsonServer.defaults({
+  logger: false, // Disable logger for serverless
+});
+
+// Enable CORS for all origins
+app.use((req, res, next) => {
+  res.header("Access-Control-Allow-Origin", "*");
+  res.header("Access-Control-Allow-Headers", "*");
+  res.header(
+    "Access-Control-Allow-Methods",
+    "GET,PUT,POST,DELETE,PATCH,OPTIONS"
+  );
+
+  // Handle OPTIONS requests
+  if (req.method === "OPTIONS") {
+    res.sendStatus(200);
+  } else {
+    next();
+  }
+});
+
+app.use(jsonServer.bodyParser);
+app.use(middlewares);
+
+// Health check endpoint
+app.get("/api/health", (req, res) => {
+  res.json({ status: "UP", environment: "netlify" });
+});
+
+// Custom routes
+app.get("/api/todos", (req, res, next) => {
+  if (req.query.summary === "true") {
+    const { todos } = readDb();
+    const summary = {
+      total: todos.length,
+      done: todos?.filter((todo) => todo.done).length,
+    };
+    return res.json(summary);
+  }
+  next();
+});
+
+app.post("/api/todos", (req, res) => {
+  const db = readDb();
+  const newTodo = req.body;
+
+  if (!newTodo) {
+    return res.status(400).json({ message: "Request body is required" });
+  }
+
+  // check if the todo is already in the database
+  const existingTodo = db.todos.find(
+    (todo) => normalizeValue(todo.value) === normalizeValue(newTodo.value)
+  );
+  if (existingTodo) {
+    return res
+      .status(409)
+      .json({ message: "A todo with this value already exists" });
+  }
+
+  db.todos.unshift(newTodo);
+  router.db.setState(db);
+  writeDb(db);
+
+  return res.json(newTodo);
+});
+
+// Rewrite paths to remove /api prefix before passing to json-server router
+app.use("/api", (req, res, next) => {
+  req.url = req.url.replace(/^\/api/, "");
+  next();
+});
+
+app.use(router);
+
+// Export the handler function for the serverless function
+export const handler = serverless(app);
diff --git a/netflify/prebuild.js b/netflify/prebuild.js
new file mode 100644
index 0000000..ee75adc
--- /dev/null
+++ b/netflify/prebuild.js
@@ -0,0 +1,34 @@
+// Script to prepare environment for Netlify build
+import fs from "fs";
+import path from "path";
+import { fileURLToPath } from "url";
+
+// Get directory path
+const __filename = fileURLToPath(import.meta.url);
+const __dirname = path.dirname(__filename);
+const rootDir = path.join(__dirname, "..");
+
+// Create .env file with correct API URL for production
+const envContent = `
+REACT_APP_API_URL=/api
+`;
+
+fs.writeFileSync(path.join(rootDir, ".env"), envContent);
+console.log("Created .env file for production build");
+
+// Ensure netlify/functions directory exists
+const functionsDir = path.join(rootDir, "netlify", "functions");
+if (!fs.existsSync(functionsDir)) {
+  fs.mkdirSync(functionsDir, { recursive: true });
+  console.log("Created netlify/functions directory");
+}
+
+// Copy sample db if needed
+const sampleDbPath = path.join(rootDir, "db.json.sample");
+const dbPath = path.join(rootDir, "db.json");
+if (!fs.existsSync(dbPath) && fs.existsSync(sampleDbPath)) {
+  fs.copyFileSync(sampleDbPath, dbPath);
+  console.log("Copied sample db.json");
+}
+
+console.log("Prebuild setup completed successfully");
diff --git a/netlify.toml b/netlify.toml
new file mode 100644
index 0000000..fa9e9f7
--- /dev/null
+++ b/netlify.toml
@@ -0,0 +1,18 @@
+[build]
+  command = "yarn build"
+  publish = "build"
+  functions = "netlify/functions"
+
+[dev]
+  command = "yarn start"
+  port = 3000
+
+[[redirects]]
+  from = "/api/*"
+  to = "/.netlify/functions/api/:splat"
+  status = 200
+
+[[redirects]]
+  from = "/*"
+  to = "/index.html"
+  status = 200
\ No newline at end of file
diff --git a/package.json b/package.json
index e548b3d..62970e1 100644
--- a/package.json
+++ b/package.json
@@ -26,13 +26,15 @@
     "zod": "^3.24.2"
   },
   "scripts": {
-    "prebuild": "node ./scripts/validate-env.mjs",
+    "prebuild": "node netlify/prebuild.js && node ./scripts/validate-env.mjs",
     "start": "yarn prebuild && react-scripts start",
     "build": "react-scripts build",
     "test": "react-scripts test --watchAll --transformIgnorePatterns \"node_modules/(?!(nanoid)/)\"",
     "eject": "react-scripts eject",
     "start:server": "node server.js",
-    "prepare": "cp db.json.sample db.json"
+    "prepare": "cp db.json.sample db.json",
+    "netlify-dev": "netlify dev",
+    "netlify-build": "yarn build && netlify deploy --prod"
   },
   "eslintConfig": {
     "extends": [
diff --git a/server.js b/server.js
index ede0f5d..0027877 100644
--- a/server.js
+++ b/server.js
@@ -2,6 +2,7 @@ import jsonServer from "json-server";
 import { fileURLToPath } from "url";
 import { dirname, join } from "path";
 import fs from "fs";
+import cors from "cors";
 
 const __filename = fileURLToPath(import.meta.url);
 const __dirname = dirname(__filename);
@@ -9,11 +10,20 @@ const __dirname = dirname(__filename);
 const DB_PATH = join(__dirname, "db.json");
 
 const readDb = () => {
-  return JSON.parse(fs.readFileSync(DB_PATH));
+  try {
+    return JSON.parse(fs.readFileSync(DB_PATH));
+  } catch (error) {
+    console.error("Error reading database:", error);
+    return { todos: [] };
+  }
 };
 
 const writeDb = (data) => {
-  fs.writeFileSync(DB_PATH, JSON.stringify(data, null, 2));
+  try {
+    fs.writeFileSync(DB_PATH, JSON.stringify(data, null, 2));
+  } catch (error) {
+    console.error("Error writing to database:", error);
+  }
 };
 
 const normalizeValue = (value) => {
@@ -57,17 +67,34 @@ const createTodo = (req, res) => {
 };
 
 const delayMiddleware = async (req, res, next) => {
-  await new Promise((resolve) => setTimeout(resolve, 500));
+  await new Promise((resolve) => setTimeout(resolve, 200));
   next();
 };
 
 const server = jsonServer.create();
+
+server.use(
+  cors({
+    origin: process.env.FRONTEND_URL || "*",
+    methods: ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
+    credentials: true,
+  })
+);
+
 const router = jsonServer.router(DB_PATH);
 const middlewares = jsonServer.defaults();
 
 server.use(jsonServer.bodyParser);
 server.use(middlewares);
 
+server.get("/health", (req, res) => {
+  // health check for Heroku
+  res.json({
+    status: "UP",
+    environment: process.env.NODE_ENV || "development",
+  });
+});
+
 server.use((req, res, next) => {
   if (
     req.method === "GET" &&
@@ -89,7 +116,9 @@ server.use((req, res, next) => {
 server.use(delayMiddleware);
 server.use(router);
 
-const port = 3001;
+const port = process.env.PORT || 3001;
+
 server.listen(port, () => {
   console.log(`JSON Server is running on port ${port}`);
+  console.log(`Database path: ${DB_PATH}`);
 });
diff --git a/src/lib/schema/env.js b/src/lib/schema/env.js
index 1207e0f..bff3c72 100644
--- a/src/lib/schema/env.js
+++ b/src/lib/schema/env.js
@@ -1,7 +1,7 @@
 import { z } from "zod";
 
 export const envSchema = z.object({
-  REACT_APP_API_URL: z.string().url(),
+  REACT_APP_API_URL: z.string().url().default("http://localhost:3001"),
   REACT_APP_QUERY_STALE_TIME: z.number().min(0),
   REACT_APP_QUERY_RETRY: z.number().min(0),
   REACT_APP_QUERY_DEVTOOLS: z.boolean().default(false),
